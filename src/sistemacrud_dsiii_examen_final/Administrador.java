/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sistemacrud_dsiii_examen_final;

import coloresFondo.DiseñadorFondos;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import conector.Conexion;
import conector.BD2;
import conector.BD3;
import java.awt.BorderLayout;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.table.DefaultTableModel;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.*;
import java.awt.*;
import java.awt.GradientPaint;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.text.BadLocationException;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import java.util.List;
import java.util.ArrayList;
import java.util.Comparator;
import java.sql.Timestamp;

/**
 *
 * @author raul1
 */

public class Administrador extends javax.swing.JFrame {
   private File imagenSeleccionada = null; // esta variable debe estar definida en la clase
    Conexion con = new Conexion();  
    Connection conet;
     DefaultTableModel modelo;
    Statement st;
    ResultSet rs;
    
     private static class Mensaje {
        String nombreEmisor;
        String mensaje;
        Timestamp fechaEnvio;
        String emisorId;
    }
    
    SimpleAttributeSet estiloAdmin;
SimpleAttributeSet estiloCliente;
SimpleAttributeSet estiloMensaje;
    
    int idc;
    private String cedulaClienteSeleccionado;
    String cedula = Inicio.cedulaUsuarioActual;
    String rol= "administrativo";
    /**
     * Creates new form clientView
     */
    public Administrador() {
     
        initComponents();
        cargarClientesEnLista();
        TXFcodigo.setText("");
        
         cargarDatosProductos();
         cargarDatosUsuarios();
         cargarCotizaciones();
           cargarProductosEnComboBox();
           
            JOptionPane.showMessageDialog(null, "Id usuario " + cedula);
            
            
        CBnombreproducto.addActionListener(new ActionListener() {
    public void actionPerformed(ActionEvent e) {
        filtrarProductoPorNombre();
        filtrarProductoPorCodigo();
    }
});
    
   
     
  

    }
private void configurarTransparencia() {
    // Configurar panel principal
    productos.setOpaque(false);
    
    // Componentes internos
    setTransparent(jPanel3);
    setTransparent(JPLimagen);
    setTransparent(jScrollPane1);
    setTransparent(jScrollPane1.getViewport());
    setTransparent(TAdetalleproducto);
    
    // Labels y otros componentes
    for (Component comp : productos.getComponents()) {
        setTransparent(comp);
        if (comp instanceof JLabel) {
            comp.setForeground(Color.WHITE); // Texto blanco para mejor contraste
        }
    }
    
    for (Component comp : TablaProductos.getComponents()) {
        setTransparent(comp);
        if (comp instanceof JLabel) {
            comp.setForeground(Color.WHITE); // Texto blanco para mejor contraste
        }
    }
}

private void setTransparent(Component comp) {
    if (comp instanceof JComponent) {
        ((JComponent)comp).setOpaque(false);
    }
    // Manejo especial para JTextArea
    if (comp instanceof JTextArea) {
        ((JTextArea)comp).setBackground(new Color(0, 0, 0, 0));
    }
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        client_historial = new javax.swing.JTabbedPane();
        productos =   new coloresFondo.DiseñadorFondos(
            coloresFondo.DiseñadorFondos.Combinacion.AZUL_MORADO,
            false
        );
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TablaProductos = new javax.swing.JTable();
        TXFcodigo = new javax.swing.JTextField();
        CBnombreproducto = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        TFnombre = new javax.swing.JTextField();
        TFcantdisponible = new javax.swing.JTextField();
        TFmarca = new javax.swing.JTextField();
        TFcostounitario = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        JPLimagen = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TAdetalleproducto = new javax.swing.JTextArea();
        CBcategoria = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        btnCargarimagen = new javax.swing.JButton();
        usuarios =  new coloresFondo.DiseñadorFondos(
            coloresFondo.DiseñadorFondos.Combinacion.OCEANO,
            false
        );
        jScrollPane4 = new javax.swing.JScrollPane();
        tableUsuarios =  new javax.swing.JTable() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Desactiva la edición directa
            }
        };
        // Aplica el diseño con gradiente
        coloresFondo.DiseñadorFondos.configurarTabla(
            tableUsuarios,
            coloresFondo.DiseñadorFondos.Combinacion.AZUL_MORADO
        );
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        tfnombreUser = new javax.swing.JTextField();
        tfcorreoUser = new javax.swing.JTextField();
        tfcedulaUser = new javax.swing.JTextField();
        tfcontrasenaUser = new javax.swing.JTextField();
        tftelefonoUser = new javax.swing.JTextField();
        tfdireccionUser = new javax.swing.JTextField();
        btnAgregarUser = new javax.swing.JButton();
        btnModificarUser = new javax.swing.JButton();
        btnEliminarUser = new javax.swing.JButton();
        jcrolUser = new javax.swing.JComboBox<>();
        cotizaciones =  new coloresFondo.DiseñadorFondos(
            coloresFondo.DiseñadorFondos.Combinacion.OCEANO,
            false
        );
        jScrollPane5 = new javax.swing.JScrollPane();
        tablecotizaciones =  new javax.swing.JTable() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Desactiva la edición directa
            }
        };
        // Aplica el diseño con gradiente
        coloresFondo.DiseñadorFondos.configurarTabla(
            tableUsuarios,
            coloresFondo.DiseñadorFondos.Combinacion.AZUL_MORADO
        );
        jLabel17 = new javax.swing.JLabel();
        estadistica =  new coloresFondo.DiseñadorFondos(
            coloresFondo.DiseñadorFondos.Combinacion.OCEANO,
            false
        );
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        datechosserFechaFin = new com.toedter.calendar.JDateChooser();
        datechosserFechaInicio = new com.toedter.calendar.JDateChooser();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablavista_estadistica = new javax.swing.JTable();
        CBtipoEstadistica = new javax.swing.JComboBox<>();
        jLabel21 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tablavista_estadisticachiriqui = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        tablavista_estadisticaPanama = new javax.swing.JTable();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        lblchitre = new javax.swing.JLabel();
        lblpanama = new javax.swing.JLabel();
        lblchiriqui = new javax.swing.JLabel();
        Chat =  new coloresFondo.DiseñadorFondos(
            coloresFondo.DiseñadorFondos.Combinacion.OCEANO,
            false
        );
        jLabel25 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        pantallamensaje = new javax.swing.JTextPane();
        barramensaje = new javax.swing.JTextField();
        enviar = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        jListClientes = new javax.swing.JList<>();
        jLabel26 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        inicio = new javax.swing.JMenu();
        cerrarSesion = new javax.swing.JMenuItem();
        inicio1 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        client_historial.setBackground(new java.awt.Color(255, 255, 255));
        client_historial.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        client_historial.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                client_historialPropertyChange(evt);
            }
        });

        jLabel1.setText("Nombre de producto:");

        jLabel2.setText("Codigo:");

        TablaProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        TablaProductos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaProductosMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(TablaProductos);

        TXFcodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXFcodigoActionPerformed(evt);
            }
        });

        CBnombreproducto.setToolTipText("");
        CBnombreproducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBnombreproductoActionPerformed(evt);
            }
        });

        jLabel6.setText("Nombre:");

        jLabel7.setText("Categoria:");

        jLabel8.setText("Marca:");

        jLabel9.setText("Detalle del producto:");

        jLabel10.setText("Costo_unitario:");

        jLabel11.setText("Cantidad:");

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        JPLimagen.setBackground(new java.awt.Color(204, 255, 255));

        javax.swing.GroupLayout JPLimagenLayout = new javax.swing.GroupLayout(JPLimagen);
        JPLimagen.setLayout(JPLimagenLayout);
        JPLimagenLayout.setHorizontalGroup(
            JPLimagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 89, Short.MAX_VALUE)
        );
        JPLimagenLayout.setVerticalGroup(
            JPLimagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 103, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(JPLimagen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(JPLimagen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        TAdetalleproducto.setColumns(20);
        TAdetalleproducto.setRows(5);
        jScrollPane1.setViewportView(TAdetalleproducto);

        CBcategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cemento", "Arena", "Grava", "Bloques", "Ladrillos", "Varillas", "Madera", "Concreto premezclado", "Cables", "Interruptores", "Tomacorrientes", "Tubos PVC eléctricos", "Breakers", "Lámparas", "Bombillos LED", "Tuberías PVC", "Accesorios de PVC", "Llaves de paso", "Grifería", "Pegamento para PVC", "Lavamanos / Inodoros", "Martillos", "Destornilladores", "Alicates", "Llaves ajustables", "Sierras manuales", "Cintas métricas", "Taladros", "Pulidoras", "Sierras circulares", "Soldadoras", "Amoladoras", "Pinturas (interior/exterior)", "Brochas", "Rodillos", "Disolventes", "Lijas", "Selladores", "Cascos", "Guantes", "Chalecos reflectivos", "Botas", "Gafas de seguridad", "Tornillos", "Clavos", "Tuercas y pernos", "Bisagras", "Candados", "Cadenas", "Cerámicas", "Porcelanato", "Zócalos", "Molduras", "Paneles decorativos", "Adhesivos", "Lubricantes", "Cintas aislantes", "Siliconas", "Empaques", "Otro" }));

        jLabel12.setText("Cantidad:");

        jButton2.setText("Agregar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Modificar ");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Eliminar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        btnCargarimagen.setText("Cargar Imagen");
        btnCargarimagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarimagenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout productosLayout = new javax.swing.GroupLayout(productos);
        productos.setLayout(productosLayout);
        productosLayout.setHorizontalGroup(
            productosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(productosLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(productosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(productosLayout.createSequentialGroup()
                        .addGroup(productosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(productosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                                .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(productosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, productosLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TFmarca, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(91, 91, 91))
                            .addGroup(productosLayout.createSequentialGroup()
                                .addGroup(productosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, productosLayout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(CBcategoria, 0, 155, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, productosLayout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(TFnombre)))
                                .addGap(8, 8, 8)))
                        .addGroup(productosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(productosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(productosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(TFcostounitario, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                                .addComponent(TFcantdisponible, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 940, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(productosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, productosLayout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(69, 69, 69))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, productosLayout.createSequentialGroup()
                        .addGroup(productosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(productosLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(btnCargarimagen)))
                        .addGap(36, 36, 36))))
            .addGroup(productosLayout.createSequentialGroup()
                .addGroup(productosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(productosLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(productosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(40, 40, 40)
                        .addGroup(productosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CBnombreproducto, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TXFcodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(productosLayout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jButton2)
                        .addGap(40, 40, 40)
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        productosLayout.setVerticalGroup(
            productosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(productosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(productosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(CBnombreproducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(productosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(TXFcodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(productosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(productosLayout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addGroup(productosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TFnombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TFcantdisponible, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(productosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel10)
                            .addComponent(TFcostounitario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CBcategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(productosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(productosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel9)
                                .addComponent(TFmarca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 387, Short.MAX_VALUE)
                        .addGroup(productosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton4)
                            .addComponent(jButton3)
                            .addComponent(jButton2))
                        .addGap(150, 150, 150))
                    .addGroup(productosLayout.createSequentialGroup()
                        .addGap(224, 224, 224)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCargarimagen)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        client_historial.addTab("Productos", productos);

        tableUsuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tableUsuarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableUsuariosMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tableUsuarios);

        jLabel3.setText("nombre:");

        jLabel4.setText("Cedula:");

        jLabel5.setText("Correo:");

        jLabel13.setText("Telefono:");

        jLabel14.setText("Rol:");

        jLabel15.setText("Contrasena:");

        jLabel16.setText("Direccion:");

        tfcedulaUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfcedulaUserActionPerformed(evt);
            }
        });

        btnAgregarUser.setText("Agregar");
        btnAgregarUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarUserActionPerformed(evt);
            }
        });

        btnModificarUser.setText("Modificar");
        btnModificarUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarUserActionPerformed(evt);
            }
        });

        btnEliminarUser.setText("Eliminar");
        btnEliminarUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarUserActionPerformed(evt);
            }
        });

        jcrolUser.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "cliente", "administrador" }));

        javax.swing.GroupLayout usuariosLayout = new javax.swing.GroupLayout(usuarios);
        usuarios.setLayout(usuariosLayout);
        usuariosLayout.setHorizontalGroup(
            usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(usuariosLayout.createSequentialGroup()
                .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(usuariosLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(usuariosLayout.createSequentialGroup()
                                .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel15))
                                .addGap(28, 28, 28)
                                .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfcorreoUser, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfcontrasenaUser, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(38, 38, 38)
                                .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tftelefonoUser, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfdireccionUser, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(67, 67, 67)
                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jcrolUser, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(usuariosLayout.createSequentialGroup()
                                .addComponent(btnAgregarUser)
                                .addGap(18, 18, 18)
                                .addComponent(btnModificarUser)
                                .addGap(18, 18, 18)
                                .addComponent(btnEliminarUser))))
                    .addGroup(usuariosLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(usuariosLayout.createSequentialGroup()
                                .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfnombreUser, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfcedulaUser, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 835, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(289, Short.MAX_VALUE))
        );
        usuariosLayout.setVerticalGroup(
            usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(usuariosLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(tfcedulaUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tfnombreUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel13)
                    .addComponent(tfcorreoUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tftelefonoUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(jcrolUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jLabel16)
                    .addComponent(tfcontrasenaUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfdireccionUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51)
                .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregarUser)
                    .addComponent(btnModificarUser)
                    .addComponent(btnEliminarUser))
                .addContainerGap(545, Short.MAX_VALUE))
        );

        client_historial.addTab("Usurios", usuarios);

        tablecotizaciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tablecotizaciones.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablecotizacionesMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tablecotizaciones);

        jLabel17.setText("Cotizaciones");

        javax.swing.GroupLayout cotizacionesLayout = new javax.swing.GroupLayout(cotizaciones);
        cotizaciones.setLayout(cotizacionesLayout);
        cotizacionesLayout.setHorizontalGroup(
            cotizacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cotizacionesLayout.createSequentialGroup()
                .addGroup(cotizacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cotizacionesLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 835, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(cotizacionesLayout.createSequentialGroup()
                        .addGap(302, 302, 302)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(289, Short.MAX_VALUE))
        );
        cotizacionesLayout.setVerticalGroup(
            cotizacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cotizacionesLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel17)
                .addGap(63, 63, 63)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(703, Short.MAX_VALUE))
        );

        client_historial.addTab("Cotizaciones", cotizaciones);

        jLabel18.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel18.setText("Estadistica");

        jLabel19.setText("Fecha de fin:");

        jLabel20.setText("fecha de inicio:");

        datechosserFechaInicio.setToolTipText("");

        jButton1.setText("Filtrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        tablavista_estadistica.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tablavista_estadistica);

        CBtipoEstadistica.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione", "Materiales vendidos", "Materiales cotizados", "Facturaciones" }));

        jLabel21.setText("Opciones:");

        tablavista_estadisticachiriqui.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane6.setViewportView(tablavista_estadisticachiriqui);

        tablavista_estadisticaPanama.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane7.setViewportView(tablavista_estadisticaPanama);

        jLabel22.setText("Sucursal Chitre");

        jLabel23.setText("Sucursal Chiriquí");

        jLabel24.setText("Sucursal Panamá");

        lblchitre.setText("      ");

        lblpanama.setText("      ");

        lblchiriqui.setText("      ");

        javax.swing.GroupLayout estadisticaLayout = new javax.swing.GroupLayout(estadistica);
        estadistica.setLayout(estadisticaLayout);
        estadisticaLayout.setHorizontalGroup(
            estadisticaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(estadisticaLayout.createSequentialGroup()
                .addGroup(estadisticaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(estadisticaLayout.createSequentialGroup()
                        .addGap(302, 302, 302)
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(estadisticaLayout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addComponent(datechosserFechaInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addGroup(estadisticaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(estadisticaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(estadisticaLayout.createSequentialGroup()
                                .addGroup(estadisticaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(estadisticaLayout.createSequentialGroup()
                                        .addGap(61, 61, 61)
                                        .addGroup(estadisticaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(27, 27, 27))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, estadisticaLayout.createSequentialGroup()
                                        .addComponent(lblchiriqui, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(106, 106, 106)))
                                .addGroup(estadisticaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(estadisticaLayout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(lblpanama, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(estadisticaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(CBtipoEstadistica, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(estadisticaLayout.createSequentialGroup()
                                    .addComponent(datechosserFechaFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(45, 45, 45)
                                    .addComponent(jButton1)))))
                    .addGroup(estadisticaLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(estadisticaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblchitre, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(106, Short.MAX_VALUE))
            .addGroup(estadisticaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(estadisticaLayout.createSequentialGroup()
                    .addGap(37, 37, 37)
                    .addComponent(jLabel20)
                    .addContainerGap(1027, Short.MAX_VALUE)))
        );
        estadisticaLayout.setVerticalGroup(
            estadisticaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(estadisticaLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel18)
                .addGap(12, 12, 12)
                .addGroup(estadisticaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(datechosserFechaFin, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, estadisticaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(datechosserFechaInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel19)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(estadisticaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel21)
                    .addComponent(CBtipoEstadistica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(estadisticaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(jLabel23)
                    .addComponent(jLabel24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(estadisticaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(estadisticaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblchitre)
                    .addComponent(lblpanama)
                    .addComponent(lblchiriqui))
                .addContainerGap(644, Short.MAX_VALUE))
            .addGroup(estadisticaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(estadisticaLayout.createSequentialGroup()
                    .addGap(51, 51, 51)
                    .addComponent(jLabel20)
                    .addContainerGap(955, Short.MAX_VALUE)))
        );

        client_historial.addTab("Estadisticas", estadistica);

        jLabel25.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel25.setText("Chat");

        pantallamensaje.setEditable(false);
        jScrollPane8.setViewportView(pantallamensaje);

        enviar.setText("Enviar");
        enviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enviarActionPerformed(evt);
            }
        });

        jListClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListClientesMouseClicked(evt);
            }
        });
        jScrollPane9.setViewportView(jListClientes);

        jLabel26.setText("Clientes");

        javax.swing.GroupLayout ChatLayout = new javax.swing.GroupLayout(Chat);
        Chat.setLayout(ChatLayout);
        ChatLayout.setHorizontalGroup(
            ChatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ChatLayout.createSequentialGroup()
                .addGroup(ChatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ChatLayout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(279, 279, 279)
                        .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ChatLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(ChatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(77, 77, 77)
                        .addGroup(ChatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(ChatLayout.createSequentialGroup()
                                .addComponent(barramensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(enviar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(596, Short.MAX_VALUE))
        );
        ChatLayout.setVerticalGroup(
            ChatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ChatLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(ChatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(jLabel26))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ChatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ChatLayout.createSequentialGroup()
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(ChatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(barramensaje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(enviar)))
                    .addGroup(ChatLayout.createSequentialGroup()
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(682, Short.MAX_VALUE))
        );

        client_historial.addTab("Chat", Chat);

        inicio.setText("Inicio");

        cerrarSesion.setText("Cerrar Sesión");
        cerrarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cerrarSesionActionPerformed(evt);
            }
        });
        inicio.add(cerrarSesion);

        jMenuBar1.add(inicio);

        inicio1.setText("Ir a tienda");
        inicio1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inicio1MouseClicked(evt);
            }
        });
        jMenuBar1.add(inicio1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(client_historial)
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(client_historial)
                .addContainerGap())
        );

        client_historial.getAccessibleContext().setAccessibleName("Productos ");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cerrarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cerrarSesionActionPerformed

    }//GEN-LAST:event_cerrarSesionActionPerformed

 
    
    
    
    private void client_historialPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_client_historialPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_client_historialPropertyChange

    private void CBnombreproductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBnombreproductoActionPerformed
   
    }//GEN-LAST:event_CBnombreproductoActionPerformed

    private void btnCargarimagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarimagenActionPerformed
                                      
    JFileChooser fileChooser = new JFileChooser();

    // Crear y establecer filtro solo para imágenes
    FileNameExtensionFilter filtroImagen = new FileNameExtensionFilter(
        "Imágenes (*.jpg, *.png, *.jpeg, *.bmp)", "jpg", "png", "jpeg", "bmp"
    );
    fileChooser.setAcceptAllFileFilterUsed(false); // Quitar opción "Todos los archivos"
    fileChooser.setFileFilter(filtroImagen);       // Usar solo el filtro de imágenes

    int resultado = fileChooser.showOpenDialog(this);

    if (resultado == JFileChooser.APPROVE_OPTION) {
        File archivoSeleccionado = fileChooser.getSelectedFile();
        cargarImagen(archivoSeleccionado);
    }


    }//GEN-LAST:event_btnCargarimagenActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      crearProducto();
       cargarDatosProductos();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void TablaProductosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaProductosMouseClicked
      int fila = TablaProductos.rowAtPoint(evt.getPoint());
    
    if (fila >= 0) {
        // Asignar los valores de la tabla a los campos
        TXFcodigo.setText(TablaProductos.getValueAt(fila, 0).toString()); // código_producto
        TFnombre.setText(TablaProductos.getValueAt(fila, 1).toString()); // nombre
        CBcategoria.setSelectedItem(TablaProductos.getValueAt(fila, 2).toString()); // categoría
        TFmarca.setText(TablaProductos.getValueAt(fila, 3).toString());           // marca
        TAdetalleproducto.setText(TablaProductos.getValueAt(fila, 4).toString()); // detalle
        TFcostounitario.setText(TablaProductos.getValueAt(fila, 5).toString());   // costo_unitario
        TFcantdisponible.setText(TablaProductos.getValueAt(fila, 6).toString());  // cantidad_disponible

        // Obtener el ID o nombre para consultar la imagen
    String idMaterial = TablaProductos.getValueAt(fila, 0).toString();

try {
    Connection cn = con.getConnection();
    String sql = "SELECT imagen FROM materiales WHERE id_material = ?";
    PreparedStatement ps = cn.prepareStatement(sql);
    ps.setString(1, idMaterial);
    ResultSet rs = ps.executeQuery();

    if (rs.next()) {
        byte[] imagenBytes = rs.getBytes("imagen");
        if (imagenBytes != null) {
            InputStream in = new ByteArrayInputStream(imagenBytes);
            BufferedImage bImage = ImageIO.read(in);
            Image img = bImage.getScaledInstance(JPLimagen.getWidth(), JPLimagen.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon icono = new ImageIcon(img);

            // Mostrar la imagen en el panel
            Graphics g = JPLimagen.getGraphics();
            g.clearRect(0, 0, JPLimagen.getWidth(), JPLimagen.getHeight());
            g.drawImage(icono.getImage(), 0, 0, JPLimagen.getWidth(), JPLimagen.getHeight(), null);
        }
    }

    ps.close();
    rs.close();
    cn.close();
} catch (Exception e) {
    e.printStackTrace();
    JOptionPane.showMessageDialog(null, "Error al cargar imagen: " + e.getMessage());
}}
    }//GEN-LAST:event_TablaProductosMouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
     modificarProducto();
       cargarDatosProductos();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
      eliminarProducto();
        cargarDatosProductos();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void tfcedulaUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfcedulaUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfcedulaUserActionPerformed

    private void TXFcodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXFcodigoActionPerformed
       filtrarProductoPorCodigo(); 
    }//GEN-LAST:event_TXFcodigoActionPerformed

    private void btnAgregarUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarUserActionPerformed
        AgregarUsuario();
    }//GEN-LAST:event_btnAgregarUserActionPerformed

    private void tableUsuariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableUsuariosMouseClicked
     int fila = tableUsuarios.rowAtPoint(evt.getPoint());

    if (fila >= 0) {
        tfcedulaUser.setText(tableUsuarios.getValueAt(fila, 0).toString());  // cédula
        tfnombreUser.setText(tableUsuarios.getValueAt(fila, 1).toString());  // nombre
        tfcorreoUser.setText(tableUsuarios.getValueAt(fila, 2).toString());  // correo
        tfcontrasenaUser.setText(tableUsuarios.getValueAt(fila, 3).toString()); // contraseña
        tftelefonoUser.setText(tableUsuarios.getValueAt(fila, 4).toString()); // teléfono
        tfdireccionUser.setText(tableUsuarios.getValueAt(fila, 5).toString()); // dirección
        jcrolUser.setSelectedItem(tableUsuarios.getValueAt(fila, 6).toString()); // rol (combo box)
    }
  try {
    
} catch (Exception e) {
    e.printStackTrace();
    JOptionPane.showMessageDialog(null, "Error al cargar imagen: " + e.getMessage());
}
    }//GEN-LAST:event_tableUsuariosMouseClicked

    private void btnModificarUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarUserActionPerformed
       modificarUsuario();
    }//GEN-LAST:event_btnModificarUserActionPerformed

    private void btnEliminarUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarUserActionPerformed
        eliminarUsuario();
    }//GEN-LAST:event_btnEliminarUserActionPerformed

    private void tablecotizacionesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablecotizacionesMouseClicked
       
     int fila = tablecotizaciones.getSelectedRow();
    if (fila >= 0) {
        int idCotizacion = Integer.parseInt(tablecotizaciones.getValueAt(fila, 0).toString());

       
       
    }    
        
        
        
        
        
        
        
    }//GEN-LAST:event_tablecotizacionesMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      String seleccion = CBtipoEstadistica.getSelectedItem().toString();

    if (seleccion.equals("Cotizaciones realizadas")) {
   // generarEstadisticaCotizaciones();
    } else if (seleccion.equals("Facturaciones")) {
   generarEstadisticaFacturas();
    } else if (seleccion.equals("Materiales vendidos")) {
    generarEstadisticaMateriales();
    } else if (seleccion.equals("Materiales cotizados")) {
  generarEstadisticaCotizaciones();
    } else if(seleccion.equals("Seleccione")){
       JOptionPane.showMessageDialog(null, "Por favor, seleccione la estadistica que desea visualizar");
}
    }//GEN-LAST:event_jButton1ActionPerformed

    private void inicio1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inicio1MouseClicked
        Cliente clienteVentana = new Cliente();
    clienteVentana.setVisible(true);
    }//GEN-LAST:event_inicio1MouseClicked

    private void enviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enviarActionPerformed
if (cedulaClienteSeleccionado == null || cedulaClienteSeleccionado.trim().isEmpty()) {
    JOptionPane.showMessageDialog(null, "No se ha seleccionado un receptor válido para enviar el mensaje.");
    return;
}
   String texto = barramensaje.getText().trim();
if (!texto.isEmpty()) {
    guardarYcargarEnpantalla(texto);
    barramensaje.setText(""); // limpiar campo después de enviar
}
    }//GEN-LAST:event_enviarActionPerformed

    private void jListClientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListClientesMouseClicked
  String seleccionado = jListClientes.getSelectedValue();  // Ej: "8-123-456 - Juan Pérez (Chitré)"
    if (seleccionado != null && seleccionado.contains(" - ")) {
        cedulaClienteSeleccionado = seleccionado.split(" - ")[0].trim();  // Guarda solo la cédula
        System.out.println("Cédula seleccionada: " + cedulaClienteSeleccionado);
    
      cargarMensajesGuardados();
    } 
          JOptionPane.showMessageDialog(null, "Cedula: " + cedulaClienteSeleccionado);
    }//GEN-LAST:event_jListClientesMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Administrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Administrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Administrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Administrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                String idUsuario = (args.length > 0) ? args[0] : "";
                new Administrador().setVisible(true);
            }
        });
    }

    
private void cargarImagen(File archivoImagen) {
    try {
        // Leer la imagen desde el archivo
        BufferedImage imagenOriginal = ImageIO.read(archivoImagen);

        // Escalar la imagen al tamaño del JPanel
        Image imagenEscalada = imagenOriginal.getScaledInstance(
                JPLimagen.getWidth(),
                JPLimagen.getHeight(),
                Image.SCALE_SMOOTH
        );

        // Crear un JLabel con la imagen y añadirlo al JPanel
        JLabel etiqueta = new JLabel(new ImageIcon(imagenEscalada));
        JPLimagen.removeAll(); // Limpiar panel
        JPLimagen.setLayout(new BorderLayout());
        JPLimagen.add(etiqueta, BorderLayout.CENTER);
        JPLimagen.revalidate();
        JPLimagen.repaint();
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al cargar la imagen");
    }
}





public void crearProducto() {
    String nombre = TFnombre.getText().trim(); 
    String categoria = (String) CBcategoria.getSelectedItem();
    String marca = TFmarca.getText().trim();
    String detalle = TAdetalleproducto.getText().trim();
    
    // Validaciones previas
    if (nombre.isEmpty() || categoria == null || marca.isEmpty() || detalle.isEmpty() ||
        TFcantdisponible.getText().trim().isEmpty() || TFcostounitario.getText().trim().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Por favor, completa todos los campos obligatorios.");
        return;
    }

    int cantidad;
    double costo;
    
    try {
        cantidad = Integer.parseInt(TFcantdisponible.getText().trim());
        costo = Double.parseDouble(TFcostounitario.getText().trim());
    } catch (NumberFormatException nfe) {
        JOptionPane.showMessageDialog(null, "Cantidad y costo deben ser valores numéricos válidos.");
        return;
    }

    FileInputStream fis = null;
    PreparedStatement ps = null;

    try {
        conet = con.getConnection();
        
        String sql = "INSERT INTO materiales (nombre, categoria, marca, detalle_del_producto, costo_unitario, cantidad_disponible, imagen) VALUES (?, ?, ?, ?, ?, ?, ?)";
        ps = conet.prepareStatement(sql);

        ps.setString(1, nombre);
        ps.setString(2, categoria);
        ps.setString(3, marca);
        ps.setString(4, detalle);
        ps.setDouble(5, costo);
        ps.setInt(6, cantidad);

        // Usar imagen seleccionada o la predeterminada
        File imagenAUsar = (imagenSeleccionada != null)
            ? imagenSeleccionada
            : new File("src/Imagenes/-no-image-available.jpg");

        if (!imagenAUsar.exists()) {
            JOptionPane.showMessageDialog(null, "La imagen predeterminada no existe.");
            return;
        }

        fis = new FileInputStream(imagenAUsar);
        ps.setBinaryStream(7, fis, (int) imagenAUsar.length());

        ps.executeUpdate();
        JOptionPane.showMessageDialog(null, "Producto creado correctamente.");
        
    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al crear producto: " + ex.getMessage());
    } finally {
        try {
            if (fis != null) fis.close();
            if (ps != null) ps.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

public void cargarDatosProductos() {
    // Crear el modelo y definir las columnas
    DefaultTableModel modelo = new DefaultTableModel();
    String[] columnas = {"ID", "Nombre", "Categoría", "Marca", "Detalle", "Costo Unitario", "Cantidad"};
    modelo.setColumnIdentifiers(columnas);
    TablaProductos.setModel(modelo); // Asignar el modelo antes de llenarlo

    String sql = "SELECT id_material, nombre, categoria, marca, detalle_del_producto, costo_unitario, cantidad_disponible FROM materiales";

    try {
        conet = con.getConnection(); // Tu clase de conexión
        st = conet.createStatement();
        rs = st.executeQuery(sql);

        while (rs.next()) {
            Object[] fila = new Object[7];
            fila[0] = rs.getInt("id_material");
            fila[1] = rs.getString("nombre");
            fila[2] = rs.getString("categoria");
            fila[3] = rs.getString("marca");
            fila[4] = rs.getString("detalle_del_producto");
            fila[5] = rs.getDouble("costo_unitario");
            fila[6] = rs.getInt("cantidad_disponible");

            modelo.addRow(fila);
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al cargar los datos: " + e.getMessage());
        e.printStackTrace();
    }
}

public void modificarProducto() {
    // Validar si se ha seleccionado un producto para modificar
    String codigo = TXFcodigo.getText().trim();
    if (codigo.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Selecciona un producto de la tabla para modificar.");
        return;
    }

    String nombre = TFnombre.getText().trim(); 
    String categoria = (String) CBcategoria.getSelectedItem();
    String marca = TFmarca.getText().trim();
    String detalle = TAdetalleproducto.getText().trim();

    // Validaciones previas
    if (nombre.isEmpty() || categoria == null || marca.isEmpty() || detalle.isEmpty() ||
        TFcantdisponible.getText().trim().isEmpty() || TFcostounitario.getText().trim().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Por favor, completa todos los campos obligatorios.");
        return;
    }

    int cantidad;
    double costo;

    try {
        cantidad = Integer.parseInt(TFcantdisponible.getText().trim());
        costo = Double.parseDouble(TFcostounitario.getText().trim());
    } catch (NumberFormatException nfe) {
        JOptionPane.showMessageDialog(null, "Cantidad y costo deben ser valores numéricos válidos.");
        return;
    }

    FileInputStream fis = null;
    PreparedStatement ps = null;

    try {
        conet = con.getConnection();

        String sql = "UPDATE materiales SET nombre = ?, categoria = ?, marca = ?, detalle_del_producto = ?, costo_unitario = ?, cantidad_disponible = ?, imagen = ? WHERE id_material = ?";
        ps = conet.prepareStatement(sql);

        ps.setString(1, nombre);
        ps.setString(2, categoria);
        ps.setString(3, marca);
        ps.setString(4, detalle);
        ps.setDouble(5, costo);
        ps.setInt(6, cantidad);

        File imagenAUsar = (imagenSeleccionada != null)
            ? imagenSeleccionada
            : new File("src/Imagenes/-no-image-available.jpg");

        if (!imagenAUsar.exists()) {
            JOptionPane.showMessageDialog(null, "La imagen predeterminada no existe.");
            return;
        }

        fis = new FileInputStream(imagenAUsar);
        ps.setBinaryStream(7, fis, (int) imagenAUsar.length());
        ps.setInt(8, Integer.parseInt(codigo));  // ID del producto

        int filasAfectadas = ps.executeUpdate();

        if (filasAfectadas > 0) {
            JOptionPane.showMessageDialog(null, "Producto modificado correctamente.");
        } else {
            JOptionPane.showMessageDialog(null, "No se encontró el producto para modificar.");
        }

    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al modificar producto: " + ex.getMessage());
    } finally {
        try {
            if (fis != null) fis.close();
            if (ps != null) ps.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

public void eliminarProducto(){
 int fila = TablaProductos.getSelectedRow();

    if (fila < 0) {
        JOptionPane.showMessageDialog(null, "Seleccione un producto a eliminar.");
        return;
    }

    String codigoProducto = TablaProductos.getValueAt(fila, 0).toString(); // Suponiendo que el ID está en la columna 0

    int confirmacion = JOptionPane.showConfirmDialog(
        null,
        "¿Está seguro que desea eliminar este producto?",
        "Confirmar eliminación",
        JOptionPane.YES_NO_OPTION
    );

    if (confirmacion == JOptionPane.YES_OPTION) {
        Connection cn = null;
           PreparedStatement ps = null;

        try {
             conet = con.getConnection();
             
            String sql = "DELETE FROM materiales WHERE id_material = ?";
             ps = conet.prepareStatement(sql);
            ps.setString(1, codigoProducto);

            int filasAfectadas = ps.executeUpdate();

            if (filasAfectadas > 0) {
                JOptionPane.showMessageDialog(null, "Producto eliminado correctamente.");
                
         cargarDatosProductos();
            } else {
                JOptionPane.showMessageDialog(null, "No se pudo eliminar el producto.");
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al eliminar producto: " + e.getMessage());
        } finally {
            try {
                if (ps != null) ps.close();
                if (cn != null) cn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
}
public void cargarProductosEnComboBox() {
    Connection conet = null;
    PreparedStatement ps = null;
    ResultSet rs = null;

    try {
        conet = con.getConnection();
        String sql = "SELECT nombre FROM materiales";
        ps = conet.prepareStatement(sql);
        rs = ps.executeQuery();

        CBnombreproducto.removeAllItems(); // Limpia el combo antes de cargar

        CBnombreproducto.addItem("Seleccione un producto"); // ← Opción por defecto

        while (rs.next()) {
            String nombreProducto = rs.getString("nombre");
            CBnombreproducto.addItem(nombreProducto);
        }

        CBnombreproducto.setSelectedIndex(0); // ← Se asegura que esté seleccionado por defecto

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al cargar productos: " + e.getMessage());
    } finally {
        try {
            if (rs != null) rs.close();
            if (ps != null) ps.close();
            if (conet != null) conet.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
}


public void filtrarProductoPorNombre() {
    String nombreSeleccionado = (String) CBnombreproducto.getSelectedItem();

    DefaultTableModel modelo = new DefaultTableModel();
    String[] columnas = {"ID", "Nombre", "Categoría", "Marca", "Detalle", "Costo Unitario", "Cantidad"};
    modelo.setColumnIdentifiers(columnas);

    Connection conet = null;
    PreparedStatement ps = null;
    ResultSet rs = null;

    try {
        conet = con.getConnection();
        String sql;

        if (nombreSeleccionado == null || nombreSeleccionado.equals("Seleccione un producto")) {
            // Si no se seleccionó producto, mostrar todos
            sql = "SELECT id_material, nombre, categoria, marca, detalle_del_producto, costo_unitario, cantidad_disponible FROM materiales";
            ps = conet.prepareStatement(sql);
            TXFcodigo.setText(""); // Limpia el campo de código
        } else {
            sql = "SELECT id_material, nombre, categoria, marca, detalle_del_producto, costo_unitario, cantidad_disponible FROM materiales WHERE nombre = ?";
            ps = conet.prepareStatement(sql);
            ps.setString(1, nombreSeleccionado);
        }

        rs = ps.executeQuery();

        boolean primerRegistro = true;

        while (rs.next()) {
            Object[] fila = new Object[7];
            fila[0] = rs.getInt("id_material");
            fila[1] = rs.getString("nombre");
            fila[2] = rs.getString("categoria");
            fila[3] = rs.getString("marca");
            fila[4] = rs.getString("detalle_del_producto");
            fila[5] = rs.getDouble("costo_unitario");
            fila[6] = rs.getInt("cantidad_disponible");
            modelo.addRow(fila);

            if (primerRegistro && !nombreSeleccionado.equals("Seleccione un producto")) {
                TXFcodigo.setText(String.valueOf(rs.getInt("id_material")));
                primerRegistro = false;
            }
        }

        TablaProductos.setModel(modelo);

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al filtrar producto: " + e.getMessage());
    } finally {
        try {
            if (rs != null) rs.close();
            if (ps != null) ps.close();
            if (conet != null) conet.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
}

public void filtrarProductoPorCodigo() {
    String codigo = TXFcodigo.getText().trim();

    Connection conet = null;
    PreparedStatement ps = null;
    ResultSet rs = null;

    DefaultTableModel model = (DefaultTableModel)  TablaProductos.getModel();
    model.setRowCount(0); // Limpiar la tabla antes de mostrar datos

    if (codigo.isEmpty()) {
        // Si está vacío, restaurar combo y cargar todos los productos
        CBnombreproducto.setSelectedIndex(0); // Seleccione un producto
       
         cargarDatosProductos(); // ← Debes tener este método implementado
        return;
    }

    try {
        conet = con.getConnection();
        String sql = "SELECT * FROM materiales WHERE id_material = ?";
        ps = conet.prepareStatement(sql);
        ps.setInt(1, Integer.parseInt(codigo));
        rs = ps.executeQuery();

        boolean encontrado = false;

        while (rs.next()) {
            Object[] fila = new Object[]{
                rs.getInt("id_material"),
                rs.getString("nombre"),
                rs.getString("categoria"),
                rs.getString("marca"),
                rs.getString("detalle_del_producto"),
                rs.getDouble("costo_unitario"),
                rs.getInt("cantidad_disponible")
            };
            model.addRow(fila);
            encontrado = true;

            // Actualizar el combo con el nombre correspondiente
            String nombreProducto = rs.getString("nombre");
            CBnombreproducto.setSelectedItem(nombreProducto);
        }

        if (!encontrado) {
            JOptionPane.showMessageDialog(null, "No se encontró producto con ese código.");
            CBnombreproducto.setSelectedIndex(0);
        }

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "El código debe ser un número válido.");
        CBnombreproducto.setSelectedIndex(0);
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al filtrar producto: " + e.getMessage());
    } finally {
        try {
            if (rs != null) rs.close();
            if (ps != null) ps.close();
            if (conet != null) conet.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
}
private GradientPaint createGradient() {
    return new GradientPaint(
        0, 0, new Color(100, 149, 237),
        0, productos.getHeight(), new Color(147, 112, 219));
}









public void cargarDatosUsuarios() {
    DefaultTableModel modelo = new DefaultTableModel();
    String[] columnas = {"Cédula", "Nombre", "Correo", "Contraseña", "Teléfono", "Dirección", "Rol"};
    modelo.setColumnIdentifiers(columnas);
    tableUsuarios.setModel(modelo);

    String sql = "SELECT cedula, nombre, correo, contrasena, telefono, direccion, rol FROM usuarios";

    try {
        conet = con.getConnection(); // Tu clase de conexión
        st = conet.createStatement();
        rs = st.executeQuery(sql);

        while (rs.next()) {
            Object[] fila = new Object[7];
            fila[0] = rs.getString("cedula");
            fila[1] = rs.getString("nombre");
            fila[2] = rs.getString("correo");
            fila[3] = rs.getString("contrasena");
            fila[4] = rs.getString("telefono");
            fila[5] = rs.getString("direccion");
            fila[6] = rs.getString("rol");

            modelo.addRow(fila);
        }

        // Establecer color negro al texto de las celdas
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setForeground(Color.BLACK);
        for (int i = 0; i < tableUsuarios.getColumnCount(); i++) {
            tableUsuarios.getColumnModel().getColumn(i).setCellRenderer(renderer);
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al cargar los datos de usuarios: " + e.getMessage());
        e.printStackTrace();
    }
}


public void AgregarUsuario() {
    // Obtener los datos de los campos
    String cedula = tfcedulaUser.getText().trim();
    String nombre = tfnombreUser.getText().trim();
    String correo = tfcorreoUser.getText().trim();
    String contrasena = tfcontrasenaUser.getText().trim();
    String telefono = tftelefonoUser.getText().trim();
    String direccion = tfdireccionUser.getText().trim();
    String rol = (String) jcrolUser.getSelectedItem();

    // Validaciones
    if (cedula.isEmpty() || nombre.isEmpty() || correo.isEmpty() ||
        contrasena.isEmpty() || telefono.isEmpty() || direccion.isEmpty() || rol == null) {
        JOptionPane.showMessageDialog(null, "Por favor complete todos los campos.", "Campos Vacíos", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Conexión e inserción
    Connection conet = null;
    PreparedStatement ps = null;

    try {
        conet = con.getConnection(); // Asegúrate de tener tu clase `con` conectada a la BD
        String sql = "INSERT INTO usuarios (cedula, nombre, correo, contrasena, telefono, direccion, rol) VALUES (?, ?, ?, ?, ?, ?, ?)";
        ps = conet.prepareStatement(sql);

        ps.setString(1, cedula);
        ps.setString(2, nombre);
        ps.setString(3, correo);
        ps.setString(4, contrasena);
        ps.setString(5, telefono);
        ps.setString(6, direccion);
        ps.setString(7, rol);

        int resultado = ps.executeUpdate();

        if (resultado > 0) {
            JOptionPane.showMessageDialog(null, "Usuario agregado exitosamente.");
            // Opcional: limpiar campos
            limpiarCamposUsuario();
        } else {
            JOptionPane.showMessageDialog(null, "No se pudo agregar el usuario.");
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al agregar usuario: " + e.getMessage());
    } finally {
        try {
            if (ps != null) ps.close();
            if (conet != null) conet.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    cargarDatosUsuarios();
}


public void limpiarCamposUsuario() {
    tfcedulaUser.setText("");
    tfnombreUser.setText("");
    tfcorreoUser.setText("");
    tfcontrasenaUser.setText("");
    tftelefonoUser.setText("");
    tfdireccionUser.setText("");
    jcrolUser.setSelectedIndex(0); // Asegúrate que el índice 0 sea "Seleccione rol"
}


public void modificarUsuario() {
    String cedula = tfcedulaUser.getText().trim();
    String nombre = tfnombreUser.getText().trim();
    String correo = tfcorreoUser.getText().trim();
    String contrasena = tfcontrasenaUser.getText().trim();
    String telefono = tftelefonoUser.getText().trim();
    String direccion = tfdireccionUser.getText().trim();
    String rol = (String) jcrolUser.getSelectedItem();

    // Validación
    if (cedula.isEmpty() || nombre.isEmpty() || correo.isEmpty() || contrasena.isEmpty() || 
        telefono.isEmpty() || direccion.isEmpty() || rol == null) {
        JOptionPane.showMessageDialog(null, "Por favor complete todos los campos.");
        return;
    }

    // Actualizar en base de datos
    try {
        Connection cn = con.getConnection();
        String sql = "UPDATE usuarios SET nombre = ?, correo = ?, contrasena = ?, telefono = ?, direccion = ?, rol = ? WHERE cedula = ?";
        PreparedStatement ps = cn.prepareStatement(sql);
        ps.setString(1, nombre);
        ps.setString(2, correo);
        ps.setString(3, contrasena);
        ps.setString(4, telefono);
        ps.setString(5, direccion);
        ps.setString(6, rol);
        ps.setString(7, cedula);

        int filasAfectadas = ps.executeUpdate();
        if (filasAfectadas > 0) {
            JOptionPane.showMessageDialog(null, "Usuario modificado correctamente.");
              cargarDatosUsuarios();
              limpiarCamposUsuario();
        } else {
            JOptionPane.showMessageDialog(null, "No se encontró un usuario con esa cédula.");
        }

        ps.close();
        cn.close();
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al modificar usuario: " + e.getMessage());
    }
}

public void eliminarUsuario() {
    String cedula = tfcedulaUser.getText().trim();

    // Validar que se haya ingresado la cédula
    if (cedula.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Ingrese la cédula del usuario que desea eliminar.");
        return;
    }

    int confirmacion = JOptionPane.showConfirmDialog(null, 
        "¿Está seguro que desea eliminar este usuario?", 
        "Confirmar eliminación", JOptionPane.YES_NO_OPTION);

    if (confirmacion == JOptionPane.YES_OPTION) {
        try {
            Connection cn = con.getConnection();
            String sql = "DELETE FROM usuarios WHERE cedula = ?";
            PreparedStatement ps = cn.prepareStatement(sql);
            ps.setString(1, cedula);

            int filasAfectadas = ps.executeUpdate();
            if (filasAfectadas > 0) {
                JOptionPane.showMessageDialog(null, "Usuario eliminado correctamente.");
                  cargarDatosUsuarios();
              limpiarCamposUsuario();
            } else {
                JOptionPane.showMessageDialog(null, "No se encontró un usuario con esa cédula.");
            }

            ps.close();
            cn.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al eliminar usuario: " + e.getMessage());
        }
    }
}

public void cargarCotizaciones() {
    DefaultTableModel modelo = new DefaultTableModel();
    modelo.addColumn("ID");
    modelo.addColumn("Cédula Cliente");
    modelo.addColumn("Fecha");
    modelo.addColumn("Estado");
    modelo.addColumn("Subtotal");
    modelo.addColumn("ITBMS");
    modelo.addColumn("Total");

    tablecotizaciones.setModel(modelo);

    String sql = "SELECT id_cotizacion, cedula_cliente, fecha, subtotal, itbms, total FROM cotizaciones";

    try {
   
    conet = con.getConnection(); // Tu clase de conexión
        st = conet.createStatement();
        rs = st.executeQuery(sql);

        while (rs.next()) {
            Object[] fila = new Object[7];
            fila[0] = rs.getInt("id_cotizacion");
            fila[1] = rs.getString("cedula_cliente");
            fila[2] = rs.getTimestamp("fecha");
       
            fila[3] = rs.getDouble("subtotal");
            fila[4] = rs.getDouble("itbms");
            fila[5] = rs.getDouble("total");
            modelo.addRow(fila);
        }

        tablecotizaciones.setModel(modelo);

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al cargar cotizaciones: " + e.getMessage());
    }
}


public void generarEstadisticaMateriales() {
    java.sql.Date sqlFechaInicio = new java.sql.Date(datechosserFechaInicio.getDate().getTime());
    java.sql.Date sqlFechaFin = new java.sql.Date(datechosserFechaFin.getDate().getTime());

    // Crear modelos de tabla
    DefaultTableModel modeloChitre = new DefaultTableModel(new String[]{"ID Material", "Material", "Cantidad Vendida"}, 0);
    DefaultTableModel modeloVeraguas = new DefaultTableModel(new String[]{"ID Material", "Material", "Cantidad Vendida"}, 0);
    DefaultTableModel modeloPanama = new DefaultTableModel(new String[]{"ID Material", "Material", "Cantidad Vendida"}, 0);

    String sql =
        "SELECT m.id_material, m.nombre AS material, SUM(df.cantidad) AS total_vendido " +
        "FROM detalle_factura df " +
        "JOIN facturas f ON df.id_factura = f.id_factura " +
        "JOIN materiales m ON df.id_material = m.id_material " +
        "WHERE f.fecha BETWEEN ? AND ? " +
        "GROUP BY m.id_material, m.nombre " +
        "ORDER BY total_vendido DESC";

    // Conexiones
    try (
        Connection conChitre = new Conexion().getConnection();
        Connection conChiriqui = BD2.conector();
        Connection conPanama = BD3.conector();

        PreparedStatement psChitre = conChitre.prepareStatement(sql);
        PreparedStatement psChiriqui = conChiriqui.prepareStatement(sql);
        PreparedStatement psPanama = conPanama.prepareStatement(sql)
    ) {
        // Establecer parámetros para todas las consultas
        psChitre.setDate(1, sqlFechaInicio);
        psChitre.setDate(2, sqlFechaFin);

        psChiriqui.setDate(1, sqlFechaInicio);
        psChiriqui.setDate(2, sqlFechaFin);

        psPanama.setDate(1, sqlFechaInicio);
        psPanama.setDate(2, sqlFechaFin);

        // Ejecutar y procesar resultados para Chitré
        try (ResultSet rsChitre = psChitre.executeQuery()) {
            while (rsChitre.next()) {
                modeloChitre.addRow(new Object[]{
                    rsChitre.getInt("id_material"),
                    rsChitre.getString("material"),
                    rsChitre.getInt("total_vendido")
                });
            }
        }

        // Ejecutar y procesar resultados para Veraguas
        try (ResultSet rsVeraguas = psChiriqui.executeQuery()) {
            while (rsVeraguas.next()) {
                modeloVeraguas.addRow(new Object[]{
                    rsVeraguas.getInt("id_material"),
                    rsVeraguas.getString("material"),
                    rsVeraguas.getInt("total_vendido")
                });
            }
        }

        // Ejecutar y procesar resultados para Panamá
        try (ResultSet rsPanama = psPanama.executeQuery()) {
            while (rsPanama.next()) {
                modeloPanama.addRow(new Object[]{
                    rsPanama.getInt("id_material"),
                    rsPanama.getString("material"),
                    rsPanama.getInt("total_vendido")
                });
            }
        }

        // Asignar modelos a las tablas
        tablavista_estadistica.setModel(modeloChitre);
        tablavista_estadisticachiriqui.setModel(modeloVeraguas);
        tablavista_estadisticaPanama.setModel(modeloPanama);

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al generar estadística: " + e.getMessage());
        e.printStackTrace();
    }
}

public void generarEstadisticaCotizaciones() {
    java.sql.Date sqlFechaInicio = new java.sql.Date(datechosserFechaInicio.getDate().getTime());
    java.sql.Date sqlFechaFin = new java.sql.Date(datechosserFechaFin.getDate().getTime());

    DefaultTableModel modeloChitre = new DefaultTableModel(new String[]{"ID Material", "Material", "Cantidad Cotizada"}, 0);
    DefaultTableModel modeloVeraguas = new DefaultTableModel(new String[]{"ID Material", "Material", "Cantidad Cotizada"}, 0);
    DefaultTableModel modeloPanama = new DefaultTableModel(new String[]{"ID Material", "Material", "Cantidad Cotizada"}, 0);

    String sqlDetalle = 
        "SELECT m.id_material, m.nombre AS material, SUM(dc.cantidad) AS total_cotizado " +
        "FROM detalle_cotizacion dc " +
        "JOIN cotizaciones c ON dc.id_cotizacion = c.id_cotizacion " +
        "JOIN materiales m ON dc.id_material = m.id_material " +
        "WHERE c.fecha BETWEEN ? AND ? " +
        "GROUP BY m.id_material, m.nombre " +
        "ORDER BY total_cotizado DESC";

    String sqlConteo =
        "SELECT COUNT(DISTINCT id_cotizacion) AS total_cotizaciones " +
        "FROM cotizaciones " +
        "WHERE fecha BETWEEN ? AND ?";

    try (
        Connection conChitre = new Conexion().getConnection();
        Connection conChiriqui = BD2.conector();
        Connection conPanama = BD3.conector();

        PreparedStatement psChitre = conChitre.prepareStatement(sqlDetalle);
        PreparedStatement psChiriqui = conChiriqui.prepareStatement(sqlDetalle);
        PreparedStatement psPanama = conPanama.prepareStatement(sqlDetalle);

        PreparedStatement psConteoChitre = conChitre.prepareStatement(sqlConteo);
        PreparedStatement psConteoChiriqui = conChiriqui.prepareStatement(sqlConteo);
        PreparedStatement psConteoPanama = conPanama.prepareStatement(sqlConteo);
    ) {
        // Establecer fechas para todos los statements
        for (PreparedStatement ps : new PreparedStatement[]{psChitre, psChiriqui, psPanama, psConteoChitre, psConteoChiriqui, psConteoPanama}) {
            ps.setDate(1, sqlFechaInicio);
            ps.setDate(2, sqlFechaFin);
        }

        // Procesar resultados de detalle para Chitré
        try (ResultSet rs = psChitre.executeQuery()) {
            while (rs.next()) {
                modeloChitre.addRow(new Object[]{
                    rs.getInt("id_material"),
                    rs.getString("material"),
                    rs.getInt("total_cotizado")
                });
            }
        }

        // Procesar resultados de detalle para Chiriquí
        try (ResultSet rs = psChiriqui.executeQuery()) {
            while (rs.next()) {
                modeloVeraguas.addRow(new Object[]{
                    rs.getInt("id_material"),
                    rs.getString("material"),
                    rs.getInt("total_cotizado")
                });
            }
        }

        // Procesar resultados de detalle para Panamá
        try (ResultSet rs = psPanama.executeQuery()) {
            while (rs.next()) {
                modeloPanama.addRow(new Object[]{
                    rs.getInt("id_material"),
                    rs.getString("material"),
                    rs.getInt("total_cotizado")
                });
            }
        }

        // Contar cotizaciones Chitré
        try (ResultSet rs = psConteoChitre.executeQuery()) {
            if (rs.next()) {
                int total = rs.getInt("total_cotizaciones");
                lblchitre.setText("Cotizaciones: " + total);
            }
        }

        // Contar cotizaciones Chiriquí
        try (ResultSet rs = psConteoChiriqui.executeQuery()) {
            if (rs.next()) {
                int total = rs.getInt("total_cotizaciones");
                lblchiriqui.setText("Cotizaciones: " + total);
            }
        }

        // Contar cotizaciones Panamá
        try (ResultSet rs = psConteoPanama.executeQuery()) {
            if (rs.next()) {
                int total = rs.getInt("total_cotizaciones");
                lblpanama.setText("Cotizaciones: " + total);
            }
        }

        // Mostrar resultados en tablas
        tablavista_estadistica.setModel(modeloChitre);
        tablavista_estadisticachiriqui.setModel(modeloVeraguas);
        tablavista_estadisticaPanama.setModel(modeloPanama);

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al generar estadística de cotizaciones: " + e.getMessage());
        e.printStackTrace();
    }
}

public void generarEstadisticaFacturas() {
    java.sql.Date sqlFechaInicio = new java.sql.Date(datechosserFechaInicio.getDate().getTime());
    java.sql.Date sqlFechaFin = new java.sql.Date(datechosserFechaFin.getDate().getTime());

    DefaultTableModel modeloChitre = new DefaultTableModel(new String[]{"ID Material", "Material", "Cantidad Facturada"}, 0);
    DefaultTableModel modeloVeraguas = new DefaultTableModel(new String[]{"ID Material", "Material", "Cantidad Facturada"}, 0);
    DefaultTableModel modeloPanama = new DefaultTableModel(new String[]{"ID Material", "Material", "Cantidad Facturada"}, 0);

    String sqlMateriales =
        "SELECT m.id_material, m.nombre AS material, SUM(df.cantidad) AS total_facturado " +
        "FROM detalle_factura df " +
        "JOIN facturas f ON df.id_factura = f.id_factura " +
        "JOIN materiales m ON df.id_material = m.id_material " +
        "WHERE f.fecha BETWEEN ? AND ? " +
        "GROUP BY m.id_material, m.nombre " +
        "ORDER BY total_facturado DESC";

    String sqlConteoFacturas =
        "SELECT COUNT(*) AS total_facturas " +
        "FROM facturas " +
        "WHERE fecha BETWEEN ? AND ?";

    try (
        Connection conChitre = new Conexion().getConnection();
        Connection conChiriqui = BD2.conector();
        Connection conPanama = BD3.conector();

        PreparedStatement psMatChitre = conChitre.prepareStatement(sqlMateriales);
        PreparedStatement psMatChiriqui = conChiriqui.prepareStatement(sqlMateriales);
        PreparedStatement psMatPanama = conPanama.prepareStatement(sqlMateriales);

        PreparedStatement psContChitre = conChitre.prepareStatement(sqlConteoFacturas);
        PreparedStatement psContChiriqui = conChiriqui.prepareStatement(sqlConteoFacturas);
        PreparedStatement psContPanama = conPanama.prepareStatement(sqlConteoFacturas)
    ) {
        // Set fechas en los statements
        psMatChitre.setDate(1, sqlFechaInicio);
        psMatChitre.setDate(2, sqlFechaFin);
        psMatChiriqui.setDate(1, sqlFechaInicio);
        psMatChiriqui.setDate(2, sqlFechaFin);
        psMatPanama.setDate(1, sqlFechaInicio);
        psMatPanama.setDate(2, sqlFechaFin);

        psContChitre.setDate(1, sqlFechaInicio);
        psContChitre.setDate(2, sqlFechaFin);
        psContChiriqui.setDate(1, sqlFechaInicio);
        psContChiriqui.setDate(2, sqlFechaFin);
        psContPanama.setDate(1, sqlFechaInicio);
        psContPanama.setDate(2, sqlFechaFin);

        // Ejecutar y llenar modelos
        try (ResultSet rs = psMatChitre.executeQuery()) {
            while (rs.next()) {
                modeloChitre.addRow(new Object[]{
                    rs.getInt("id_material"),
                    rs.getString("material"),
                    rs.getInt("total_facturado")
                });
            }
        }

        try (ResultSet rs = psMatChiriqui.executeQuery()) {
            while (rs.next()) {
                modeloVeraguas.addRow(new Object[]{
                    rs.getInt("id_material"),
                    rs.getString("material"),
                    rs.getInt("total_facturado")
                });
            }
        }

        try (ResultSet rs = psMatPanama.executeQuery()) {
            while (rs.next()) {
                modeloPanama.addRow(new Object[]{
                    rs.getInt("id_material"),
                    rs.getString("material"),
                    rs.getInt("total_facturado")
                });
            }
        }

        // Mostrar resultados en las tablas
        tablavista_estadistica.setModel(modeloChitre);
        tablavista_estadisticachiriqui.setModel(modeloVeraguas);
        tablavista_estadisticaPanama.setModel(modeloPanama);

        // Mostrar totales de facturas en los labels
        try (ResultSet rs = psContChitre.executeQuery()) {
            if (rs.next()) {
                lblchitre.setText("Total Facturas: " + rs.getInt("total_facturas"));
            }
        }

        try (ResultSet rs = psContChiriqui.executeQuery()) {
            if (rs.next()) {
                lblchiriqui.setText("Total Facturas: " + rs.getInt("total_facturas"));
            }
        }

        try (ResultSet rs = psContPanama.executeQuery()) {
            if (rs.next()) {
                lblpanama.setText("Total Facturas: " + rs.getInt("total_facturas"));
            }
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al generar estadística de facturas: " + e.getMessage());
        e.printStackTrace();
    }
}



private void cargarClientesEnLista() {
    DefaultListModel<String> modelo = new DefaultListModel<>();
    String sql = "SELECT cedula, nombre FROM usuarios WHERE rol = 'cliente'";

    try {
        Connection conChitre = new Conexion().getConnection();
        Connection conChiriqui = BD2.conector();
        Connection conPanama = BD3.conector();

        PreparedStatement ps1 = conChitre.prepareStatement(sql);
        PreparedStatement ps2 = conChiriqui.prepareStatement(sql);
        PreparedStatement ps3 = conPanama.prepareStatement(sql);

        ResultSet rs1 = ps1.executeQuery();
        ResultSet rs2 = ps2.executeQuery();
        ResultSet rs3 = ps3.executeQuery();

        while (rs1.next()) {
            String cedula = rs1.getString("cedula");
            String nombre = rs1.getString("nombre");
            modelo.addElement(cedula + " - " + nombre + " (Chitré)");
        }

        while (rs2.next()) {
            String cedula = rs2.getString("cedula");
            String nombre = rs2.getString("nombre");
            modelo.addElement(cedula + " - " + nombre + " (Chiriquí)");
        }

        while (rs3.next()) {
            String cedula = rs3.getString("cedula");
            String nombre = rs3.getString("nombre");
            modelo.addElement(cedula + " - " + nombre + " (Panamá)");
        }

        jListClientes.setModel(modelo);

        // Cierre de recursos
        rs1.close(); ps1.close(); conChitre.close();
        rs2.close(); ps2.close(); conChiriqui.close();
        rs3.close(); ps3.close(); conPanama.close();
        
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al cargar clientes: " + e.getMessage());
    }
}


private String obtenerCedulaClienteSeleccionado() {
    return jListClientes.getSelectedValue(); // Siempre que jList contenga solo las cédulas
}


private String obtenerCedulaDesdeNombre(String nombreCliente) {
    String sql = "SELECT cedula FROM usuarios WHERE rol = 'cliente' AND nombre = ?";
    
    try {
        Connection[] conexiones = {
            new Conexion().getConnection(),
            BD2.conector(),
            BD3.conector()
        };
        
        for (Connection con : conexiones) {
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setString(1, nombreCliente);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                String cedula = rs.getString("cedula");
                rs.close();
                ps.close();
                con.close();
                return cedula;
            }
            rs.close();
            ps.close();
            con.close();
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error buscando cédula: " + e.getMessage());
    }

    return null;
}


public void cargarMensajesGuardados() {
    try {
        String sql = "SELECT u.nombre AS nombre_emisor, m.mensaje, m.fecha_envio, m.emisor_id " +
                     "FROM mensajes_chat m " +
                     "JOIN usuarios u ON m.emisor_id = u.cedula " +
                     "WHERE (m.emisor_id = ? AND m.receptor_id = ?) OR (m.emisor_id = ? AND m.receptor_id = ?) " +
                     "ORDER BY m.fecha_envio ASC";

        Connection conChitre = new Conexion().getConnection();
        Connection conChiriqui = BD2.conector();
        Connection conPanama = BD3.conector();

        PreparedStatement ps1 = conChitre.prepareStatement(sql);
        PreparedStatement ps2 = conChiriqui.prepareStatement(sql);
        PreparedStatement ps3 = conPanama.prepareStatement(sql);

        for (PreparedStatement ps : new PreparedStatement[]{ps1, ps2, ps3}) {
            ps.setString(1, cedula);
            ps.setString(2, cedulaClienteSeleccionado);
            ps.setString(3, cedulaClienteSeleccionado);
            ps.setString(4, cedula);
        }

        // Limpiar pantalla para cargar mensajes nuevos
        pantallamensaje.setText("");

        List<Mensaje> listaMensajes = new ArrayList<>();

        for (PreparedStatement ps : new PreparedStatement[]{ps1, ps2, ps3}) {
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Mensaje msg = new Mensaje();
                msg.nombreEmisor = rs.getString("nombre_emisor");
                msg.mensaje = rs.getString("mensaje");
                msg.fechaEnvio = rs.getTimestamp("fecha_envio");
                msg.emisorId = rs.getString("emisor_id");
                listaMensajes.add(msg);
            }
            rs.close();
            ps.close();
        }

        // Cerrar conexiones
        conChitre.close();
        conChiriqui.close();
        conPanama.close();

        // Ordenar lista completa por fecha
        listaMensajes.sort(Comparator.comparing(m -> m.fechaEnvio));

        // Mostrar mensajes ordenados en pantalla
        for (Mensaje m : listaMensajes) {
            String rol = m.emisorId.equals(cedula) ? "administrador" : "cliente";
            agregarMensajeEnPantalla(rol, m.mensaje, m.fechaEnvio.toString());
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error cargando mensajes guardados: " + e.getMessage());
    }
}

public void guardarYcargarEnpantalla(String mensaje) {
    if (mensaje == null || mensaje.trim().isEmpty()) return;

    String fechaHora = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());

    // Mostrar en pantalla inmediatamente
    agregarMensajeEnPantalla("administrador", mensaje, fechaHora);

    String sqlInsert = "INSERT INTO mensajes_chat (cedula, emisor_id, receptor_id, mensaje, fecha_envio) VALUES (?, ?, ?, ?, ?)";

    Connection conChitre = null, conChiriqui = null, conPanama = null;
    PreparedStatement pst1 = null, pst2 = null, pst3 = null;

    try {
        conChitre = new Conexion().getConnection();
        conChiriqui = BD2.conector();
        conPanama = BD3.conector();

        pst1 = conChitre.prepareStatement(sqlInsert);
        pst2 = conChiriqui.prepareStatement(sqlInsert);
        pst3 = conPanama.prepareStatement(sqlInsert);

        for (PreparedStatement pst : new PreparedStatement[]{pst1, pst2, pst3}) {
            pst.setString(1, cedula);                     // cedula emisor
            pst.setString(2, cedula);                     // emisor_id
            pst.setString(3, cedulaClienteSeleccionado); // receptor_id
            pst.setString(4, mensaje);
            pst.setString(5, fechaHora);
            pst.executeUpdate();
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error guardando mensaje: " + e.getMessage());
    } finally {
        try {
            if (pst1 != null) pst1.close();
            if (pst2 != null) pst2.close();
            if (pst3 != null) pst3.close();

            if (conChitre != null) conChitre.close();
            if (conChiriqui != null) conChiriqui.close();
            if (conPanama != null) conPanama.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error cerrando conexiones: " + ex.getMessage());
        }
    }
}

public void agregarMensajeEnPantalla(String rol, String mensaje, String fechaHora) {
    try {
        StyledDocument doc = (StyledDocument) pantallamensaje.getDocument();

        if ("administrador".equalsIgnoreCase(rol)) {
            doc.insertString(doc.getLength(), rol + " [" + fechaHora + "]\n", estiloAdmin);
        } else {
            doc.insertString(doc.getLength(), rol + " [" + fechaHora + "]\n", estiloCliente);
        }

        doc.insertString(doc.getLength(), mensaje + "\n\n", estiloMensaje);

        // Auto scroll al final para que se vea el último mensaje
        pantallamensaje.setCaretPosition(doc.getLength());

    } catch (BadLocationException e) {
        e.printStackTrace();
    }
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CBcategoria;
    private javax.swing.JComboBox<String> CBnombreproducto;
    private javax.swing.JComboBox<String> CBtipoEstadistica;
    private javax.swing.JPanel Chat;
    private javax.swing.JPanel JPLimagen;
    private javax.swing.JTextField JTmensaje;
    private javax.swing.JTextArea TAdetalleproducto;
    private javax.swing.JTextField TFcantdisponible;
    private javax.swing.JTextField TFcostounitario;
    private javax.swing.JTextField TFmarca;
    private javax.swing.JTextField TFnombre;
    private javax.swing.JTextField TXFcodigo;
    private javax.swing.JTable TablaProductos;
    private javax.swing.JTextField barramensaje;
    private javax.swing.JButton btnAgregarUser;
    private javax.swing.JButton btnCargarimagen;
    private javax.swing.JButton btnEliminarUser;
    private javax.swing.JButton btnModificarUser;
    private javax.swing.JMenuItem cerrarSesion;
    private javax.swing.JTabbedPane client_historial;
    private javax.swing.JPanel cotizaciones;
    private com.toedter.calendar.JDateChooser datechosserFechaFin;
    private com.toedter.calendar.JDateChooser datechosserFechaInicio;
    private javax.swing.JButton enviar;
    private javax.swing.JPanel estadistica;
    private javax.swing.JMenu inicio;
    private javax.swing.JMenu inicio1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jListClientes;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JComboBox<String> jcrolUser;
    private javax.swing.JLabel lblchiriqui;
    private javax.swing.JLabel lblchitre;
    private javax.swing.JLabel lblpanama;
    private javax.swing.JTextPane pantallamensaje;
    private javax.swing.JPanel productos;
    private javax.swing.JTable tablavista_estadistica;
    private javax.swing.JTable tablavista_estadisticaPanama;
    private javax.swing.JTable tablavista_estadisticachiriqui;
    private javax.swing.JTable tableUsuarios;
    private javax.swing.JTable tablecotizaciones;
    private javax.swing.JTextField tfcedulaUser;
    private javax.swing.JTextField tfcontrasenaUser;
    private javax.swing.JTextField tfcorreoUser;
    private javax.swing.JTextField tfdireccionUser;
    private javax.swing.JTextField tfnombreUser;
    private javax.swing.JTextField tftelefonoUser;
    private javax.swing.JPanel usuarios;
    // End of variables declaration//GEN-END:variables
}
