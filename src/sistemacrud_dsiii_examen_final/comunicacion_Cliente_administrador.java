/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package sistemacrud_dsiii_examen_final;
import coloresFondo.DiseñadorFondos;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import conector.Conexion;
import conector.BD2;
import conector.BD3;
import java.awt.BorderLayout;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.table.DefaultTableModel;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.*;
import java.awt.*;
import java.awt.GradientPaint;
import java.security.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.text.BadLocationException;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
public class comunicacion_Cliente_administrador extends javax.swing.JDialog {
         Conexion con = new Conexion();  
    Connection conet;
     DefaultTableModel modelo;
    Statement st;
    ResultSet rs;
    int idc;
      String cedula = Inicio.cedulaUsuarioActual;
      String rol= "cliente";
    int idCotizacion;

    
       private static class Mensaje {
        String nombreEmisor;
        String mensaje;
        Timestamp fechaEnvio;
        String emisorId;
    }
    
     SimpleAttributeSet estiloAdmin;
SimpleAttributeSet estiloCliente;
SimpleAttributeSet estiloMensaje;
    
public comunicacion_Cliente_administrador() {
   
    
    
    initComponents();
    cargarMensajesGuardados();
   
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        barramensaje = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        pantallamensaje = new javax.swing.JTextArea();
        enviar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("COTIZACION");

        pantallamensaje.setColumns(20);
        pantallamensaje.setRows(5);
        jScrollPane2.setViewportView(pantallamensaje);

        enviar.setText("Enviar");
        enviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enviarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(289, 289, 289))
            .addGroup(layout.createSequentialGroup()
                .addGap(151, 151, 151)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(barramensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(enviar))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(196, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(barramensaje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(enviar))
                .addContainerGap(307, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void enviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enviarActionPerformed
           String texto = barramensaje.getText().trim();
       guardarYcargarEnpantalla(texto);
    }//GEN-LAST:event_enviarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
   
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(comunicacion_Cliente_administrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(comunicacion_Cliente_administrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(comunicacion_Cliente_administrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(comunicacion_Cliente_administrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
          java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
            // ID de cotización de prueba, por ejemplo 1
           new comunicacion_Cliente_administrador().setVisible(true);
        }
         });
    }
    
public void guardarYcargarEnpantalla(String mensaje) {
    if (mensaje == null || mensaje.trim().isEmpty()) return;

    String fechaHora = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());

    // Mostrar en pantalla inmediatamente
    agregarMensajeEnPantalla("administrador", mensaje, fechaHora);

    String sqlInsert = "INSERT INTO mensajes_chat (cedula, emisor_id, receptor_id, mensaje, fecha_envio) VALUES (?, ?, ?, ?, ?)";

    Connection conChitre = null, conChiriqui = null, conPanama = null;
    PreparedStatement pst1 = null, pst2 = null, pst3 = null;

    try {
        conChitre = new Conexion().getConnection();
        conChiriqui = BD2.conector();
        conPanama = BD3.conector();

        pst1 = conChitre.prepareStatement(sqlInsert);
        pst2 = conChiriqui.prepareStatement(sqlInsert);
        pst3 = conPanama.prepareStatement(sqlInsert);

        for (PreparedStatement pst : new PreparedStatement[]{pst1, pst2, pst3}) {
            pst.setString(1, cedula);      // cedula emisor
            pst.setString(2, cedula);      // emisor_id
            pst.setNull(3, java.sql.Types.VARCHAR); // receptor_id (null permitido)
            pst.setString(4, mensaje);
            pst.setString(5, fechaHora);
            pst.executeUpdate();
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error guardando mensaje: " + e.getMessage());
    } finally {
        try {
            if (pst1 != null) pst1.close();
            if (pst2 != null) pst2.close();
            if (pst3 != null) pst3.close();

            if (conChitre != null) conChitre.close();
            if (conChiriqui != null) conChiriqui.close();
            if (conPanama != null) conPanama.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error cerrando conexiones: " + ex.getMessage());
        }
    }
}

public void cargarMensajesGuardados() {
    try {
        Connection conn = con.getConnection();
        String sql = "SELECT u.nombre AS nombre_emisor, m.mensaje, m.fecha_envio " +
                     "FROM mensajes_chat m " +
                     "JOIN usuarios u ON m.cedula = u.cedula " +
                     "WHERE m.cedula = ? " +
                     "ORDER BY m.fecha_envio ASC";

        PreparedStatement pst = conn.prepareStatement(sql);
        pst.setString(1, cedula); // cedula del usuario actual

        ResultSet rs = pst.executeQuery();

        while (rs.next()) {
            String nombreEmisor = rs.getString("nombre_emisor");
            String mensaje = rs.getString("mensaje");
            String fechaHora = rs.getString("fecha_envio");

            agregarMensajeEnPantalla(nombreEmisor, mensaje, fechaHora);
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error al cargar mensajes: " + e.getMessage());
    }
}
public void agregarMensajeEnPantalla(String rol, String mensaje, String fechaHora) {
    try {
        StyledDocument doc = (StyledDocument) pantallamensaje.getDocument();

        if ("administrador".equalsIgnoreCase(rol)) {
            doc.insertString(doc.getLength(), rol + " [" + fechaHora + "]\n", estiloAdmin);
        } else {
            doc.insertString(doc.getLength(), rol + " [" + fechaHora + "]\n", estiloCliente);
        }

        doc.insertString(doc.getLength(), mensaje + "\n\n", estiloMensaje);

        // Auto scroll al final para que se vea el último mensaje
        pantallamensaje.setCaretPosition(doc.getLength());

    } catch (BadLocationException e) {
        e.printStackTrace();
    }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField barramensaje;
    private javax.swing.JButton enviar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea pantallamensaje;
    // End of variables declaration//GEN-END:variables
}
